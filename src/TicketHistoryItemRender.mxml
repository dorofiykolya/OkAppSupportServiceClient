<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  dataChange="dataChanged(event)"
					  color="0"
					  focusColor="0"
					  focusedTextSelectionColor="0"
					  >
	<fx:Script>
		<![CDATA[
			import System.Text.StringUtil;
			
			import messages.Message;
			
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			protected function dataChanged(event:FlexEvent):void
			{
				var xml:XML = treeListData.item as XML;
				var d:Date = new Date(0,0,0,0,0,0,0);
				d.time = int(xml.@time) * 1000;
				var time:String = d.date + "/" + (d.month + 1) + "/" + d.fullYear + "-" + d.hours + ":" + minutes(d.minutes);
				if(xml && xml.name() == "message")
				{
					var text:String = xml.@text;
					labelField.htmlText = StringUtil.Format("<font color='#cccccc'>[{3}]</font> <b><font color='{1}'>{0}</font></b>: {2}",treeListData.label, getColorByType(xml.@type), text, time);
				}
				else
				{
					labelField.htmlText = StringUtil.Format("<font color='#cccccc'>[{0}]</font> <font color='#ff6565'><b>{1}</b></font>\n<font color='#cccccc'>состояние:</font>{2}, <font color='#cccccc'>тип:</font>{3}, <font color='#cccccc'>в избранном:</font>{4}", time, treeListData.label, getState(xml.@state), getType(xml.@type), getFavorite(xml.@favorite));	 
				} 
			}
			
			private function getType(value:String):String
			{
				switch(value){
					case Message.TYPE_ERROR: return "<font color='#f74545'><b>ошибка</b></font>";
					case Message.TYPE_PROPOSAL: return "<font color='#1a942e'>предложение</font>";
					case Message.TYPE_PARTNERSHIP: return "<font color='#f8eb17'>партнерство</font>";
					case Message.TYPE_THANKS: return "<font color='#177cf8'>благодарность</font>";
					case Message.TYPE_COMPLAINT: return "<font color='#f82727'><b>жалоба</b></font>";
				}
				return "...";
			}
			
			private function getFavorite(value:String):String
			{
				if(value == "true")
				{
					return "<font color='#fee516'>да</font>"; 
				}
				return "<font color='#cccccc'>нет</font>";
			}
			
			private function getState(value:String):String
			{
				switch(value)
				{
					case "scheduled":
						return "<font color='#fe7816'>не обработано</font>";
					case "answered":
						return "<font color='#09c372'>в ответах</font>";
					case "closed":
						return "<font color='#cccccc'>закрытое</font>";
				}
				return "";
			}
			
			private function minutes(value:int):String
			{
				if (value < 10)
				{
					return "0" + value;
				}
				return value.toString();
			}
			
			private function getColorByType(type:String):String
			{
				if(type == 'response')
				{
					return "#fbfe16"; 
				}
				return "#16c5fe";
			}
			
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:HGroup width="100%" height="100%" verticalAlign="middle">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
		</s:Group>
		<s:BitmapImage source="{treeListData.icon}" />
		<mx:TextArea id="labelField" 
					 width="100%"
					 paddingTop="2"
					 color="#FFFFFF" 
					 wordWrap="true"
					 text="" 
					 editable="false"
					 paddingBottom="2" 
					 paddingLeft="2"
					 paddingRight="2"/>
	</s:HGroup>
	
	
</s:MXTreeItemRenderer>
