<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  skinClass="skin.container.RoundContainerSkin"
					  creationComplete="onComplete(event)"
					  xmlns:graphics="skin.graphics.*"
					  xmlns:local="*"
					  currentState="passive"
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" >
	<s:states>
		<s:State name="passive" />
		<s:State name="tickets" />
		<s:State name="messages" />
	</s:states>
	<fx:Script>
		<![CDATA[
			import events.ModerMessagesEvent;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.globalization.LocaleID;
			import messages.ModerMessagesList;
			import messages.ModerTicketsList;
			import messages.Word;
			import mx.controls.DateField;
			
			import mx.core.UIComponent;
			import mx.events.CalendarLayoutChangeEvent;
            import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.events.StateChangeEvent;
			
			import spark.components.Group;
			import spark.components.VGroup;
			
			import System.Text.StringUtil;
			
			import events.MessageEvent;
			import events.ModerEvent;
			
			import messages.Message;
			import messages.MessageList;
			import messages.Moder;
			import messages.ModerList;
			
			import net.Connection;
			
			import utilities.Debug;
			import utilities.SafeInvoke;
			
			private var isInit:Boolean;
			
			private const STAR_NUMBER:int = 5;
			private const DEFAULT_STARS:int = 3;
			private var previousNumber:int = -1;
			private var starNumber:int = STAR_NUMBER;
			
			private var firstUnix:uint;
			private var secondUnix:uint;
			private var moder:Moder;
			private var ticket:Message;
			
			private var previousState:String;
			
			protected function onComplete(event:FlexEvent):void
			{
				ModerTicketsList.addListener(ModerMessagesEvent.MODER_TICKETS_ADD, onAddMessage);
				ModerTicketsList.addListener(ModerMessagesEvent.MODER_TICKETS_ADD_LIST, updateList);
				ModerTicketsList.addListener(ModerMessagesEvent.MODER_TICKETS_UPDATE, onUpdate);
				ModerTicketsList.addListener(ModerMessagesEvent.MODER_TICKETS_REMOVE, updateList);
				
				ModerMessagesList.addListener(ModerMessagesEvent.MODER_MESSAGES_ADD, onAddMessage);
				ModerMessagesList.addListener(ModerMessagesEvent.MODER_MESSAGES_ADD_LIST, updateList);
				ModerMessagesList.addListener(ModerMessagesEvent.MODER_MESSAGES_UPDATE, onUpdate);
				
				
				Controller.AddHandler("moder", onModer);
				Controller.AddHandler("moderMessages", onModerMessages);
			}
			
			private function onModer(e:Moder):void
			{
				moder = e;
				currentState = moder ? "tickets" : "passive";
				if (moder)
				{
					ModerTicketsList.Reset();
					updateTicketFilters();
				}
				
			}
			
			private function updateTicketFilters():void
			{
				if ( currentState != "tickets" )
				{
					return;
				}
				
				var now:Date = new Date();
				var unix:uint = now.getTime() / 1000 - now.getTimezoneOffset() * 60;
				date1.selectedDate = new Date(now.fullYear, now.month - 1, now.date);
				date2.selectedDate = now;
				
				firstUnix = unix - 2592000;
				secondUnix = unix;
				isInit = true;
				applyStars( DEFAULT_STARS );
			}
			
			private function onModerMessages(e:Message):void
			{
				ModerMessagesList.Reset();
				checkToState("messages");
			}
			
			private function onBackToTickets(e:MouseEvent):void
			{
				checkToState("tickets");
			}
			
			private function checkToState(state:String):void
			{
				currentState = state;
				updateList();
			}
			
			private function onAddMessage(e:ModerMessagesEvent = null):void
			{
				switch(currentState) {
					case 'tickets':
						addTicket(e.message);
						break;
					case 'messages':
						addMessage(e.word);
						break;
				}
			}
			
			private function onAddList(e:ModerMessagesEvent = null):void
			{
				switch(currentState) {
					case 'tickets':
						ModerMessagesGroup.tickets.Reset();
						break;
					case 'messages':
						ModerMessagesGroup.messages.Reset();
						break;
				}
				updateList();
			}
			
			private function updateList(e:ModerMessagesEvent = null):void
			{
				moderTicketsList.removeAllElements();
				
				switch(currentState) {
					case 'tickets':
						updateTicketList();
						break;
					case 'messages':
						updateMessageList();
						break;
				}
			}
			
			private function resetList():void
			{
				switch(currentState) {
					case 'tickets':
						ModerMessagesGroup.tickets.Reset();
						break;
					case 'messages':
						ModerMessagesGroup.messages.Reset();
						break;
				}
				moderTicketsList.removeAllElements();
			}
			
			private function updateTicketList():void
			{
				var list:Vector.<Message> = ModerTicketsList.List;
				for each (var m:Message in list) 
				{
					addTicket(m);
				}
			}
			
			private function updateMessageList():void
			{
				var list:Vector.<Word> = ModerMessagesList.List;
				for each (var w:Word in list) 
				{
					addMessage(w);
				}
			}
			
			private function onUpdate(e:ModerMessagesEvent = null):void
			{
				var current:ModerMessagePlaceholder;
				var id:int;
				var currentGroup:ModerMessagesGroup;
				if (currentState == 'tickets')
				{
					id = e.message.id;
					currentGroup = ModerMessagesGroup.tickets;
				}
				else
				{
					id = e.word.id;
					currentGroup = ModerMessagesGroup.messages;
				}
				if (current == null) {
					current = currentGroup.GetByMessageId(id);
					if(current){
						current.group.Remove(current);
					}
				}
				
				if (current == null) return;
				if (currentState == 'tickets')
				{
					current.message = e.message;
				}
				else
				{
					current.word = e.word;
				}
				current.group = currentGroup;
				moderTicketsList.addElement(current);
			}
			
			private function addTicket(e:Message, index:int = -1):void
			{
				var p:ModerMessagePlaceholder = new ModerMessagePlaceholder();
				p.currentState = 'ticket';
				p.message = e;
				if(p.group){
					p.group.Remove(p);
				}
				p.group = ModerMessagesGroup.tickets;
				
				if(index >= 0){
					moderTicketsList.addElementAt(p, index);
					return;
				}
				moderTicketsList.addElement(p);
			}
			
			private function addMessage(e:Word, index:int = -1):void
			{
				var p:ModerMessagePlaceholder = new ModerMessagePlaceholder();
				p.currentState = 'message';
				p.word = e;
				if(p.group){
					p.group.Remove(p);
				}
				p.group = ModerMessagesGroup.messages;
				
				if(index >= 0){
					moderTicketsList.addElementAt(p, index);
					return;
				}
				moderTicketsList.addElement(p);
			}
			
			private function useDate(e:CalendarLayoutChangeEvent):void
			{
				var currentId:String = DateField(e.target).id;
				var date:Date = DateField(e.target).selectedDate;
				var unix:uint = date.getTime() / 1000 - date.getTimezoneOffset() * 60;
				
				switch(currentId) {
					case 'date1':
						firstUnix = unix;
						break;
					case 'date2':
						secondUnix = unix;
						break;
				}

				if ( firstUnix >= secondUnix )
				{
					firstUnix = secondUnix - 86400;
					var d:Date = new Date();
					d.time = firstUnix*1000;
					date1.selectedDate = d;
				}
				getTicketsFromServer();
			}
			
			private function mOver(e:MouseEvent):void
			{
				starGroup.addEventListener(MouseEvent.MOUSE_MOVE, mMove);
			}
			
			private function mOut(e:MouseEvent):void
			{
				starGroup.removeEventListener(MouseEvent.MOUSE_MOVE, mMove);
			}
			
			private function mMove(e:MouseEvent):void
			{
				if ( e.localX > 0 )
				{
					starNumber = Math.ceil(e.localX / 15) > STAR_NUMBER ? STAR_NUMBER : Math.ceil(e.localX / 15);
				}
				else
				{
					starNumber = 0;
				}
				if ( starNumber != previousNumber )
				{
					applyStars( starNumber );
				}
				previousNumber = starNumber;
			}
			
			private function applyStars(value:int):void {
				var star:Star;
				var stars:int = starGroup.numChildren;
				
				for (var i:int = 0; i < stars; i++)
				{
					star = starGroup.getElementAt(i) as Star;
					star.checked = (value > i);
				}
				getTicketsFromServer();
			}
			
			private function getTicketsFromServer():void
			{
				if (moder)
				{
					Connection.send({getModeratorResponseTikets: {id: moder.id, stars: starNumber, timeFrom: firstUnix, timeTo: secondUnix}});
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%" radiusX="3" radiusY="3">
		<s:fill>
			<s:SolidColor color="#FFFFFF" />
		</s:fill>
	</s:Rect>
	
	<s:Rect width="100%" height="20" bottom="0">
		<s:fill>
			<s:SolidColor color="#dde7f5" />
		</s:fill>
	</s:Rect>
	<!--<s:Group>-->
		<s:HGroup top="16" left="15" gap="5" verticalAlign="middle" includeIn="messages" mouseChildren="false" click="onBackToTickets(event)" buttonMode="true" >
			<s:Image id="typeImg" left="120"
				 bottom="6"
				 width="17"
				 height="14"
				 smooth="true"
				 mouseEnabled="false"
				 smoothingQuality="high"
				 source="@Embed('assets/arrow_left_big.png')" />
			<s:Label text=" к списку тикетов" verticalCenter="0" fontSize="16" textDecoration="underline"  color="#666666" mouseEnabled="false"></s:Label>
		</s:HGroup>
	<!--</s:Group>-->
	<s:HGroup top="10" left="18" gap="5" verticalAlign="middle" includeIn="tickets">
		<s:Group>
			<s:HGroup id="starGroup" gap="0" width="88" mouseMove="mMove(event)" mouseOver="mOver(event)" mouseOut="mOut(event)" mouseChildren="false">
				<local:Star></local:Star>
				<local:Star></local:Star>
				<local:Star></local:Star>
				<local:Star></local:Star>
				<local:Star></local:Star>
			</s:HGroup>
		</s:Group>
		<s:Label text="от: " verticalCenter="0" fontSize="14" ></s:Label>
		<mx:DateField id="date1" change="useDate(event)" formatString="YYYY-MM-DD" monthNames="['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']" dayNames="['ВС', 'ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ']" firstDayOfWeek="1" minYear="2012" selectableRange="{{rangeEnd:date2.selectedDate}}"></mx:DateField>
		<s:Label text="до: " verticalCenter="0" fontSize="14"></s:Label>
		<mx:DateField id="date2" change="useDate(event)" formatString="YYYY-MM-DD" monthNames="['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']" dayNames="['ВС', 'ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ']" firstDayOfWeek="1" minYear="2012" selectableRange="{{rangeStart: date1.selectedDate,rangeEnd:new Date()}}"></mx:DateField>
	</s:HGroup>
	<s:Scroller id="answerScroller" top="44" bottom="20" width="100%" horizontalScrollPolicy="off">
		<s:VGroup id="moderTicketsList" gap="0" width="100%" height="100%">
		</s:VGroup>
	</s:Scroller>
	<mx:HRule y="44" left="0" right="0" height="2" />
</s:SkinnableContainer>
